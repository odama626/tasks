package crypto

import (
	"encoding/base64"
	"testing"
)

func TestVerifySignature(t *testing.T) {
	signature := "IbrXD/ENxXNAmwCEXJEcNTGZOqt64af4u72uhkBgB5evAAOx1H4cCJ3EGol0AYdKhUI2GUsrCjcLFwKgq10zdjlSc527BhlVVQraH2gTL/4Ivp5X9hfQt75+EfTFLTBh7VW7P3ODXox2c1h3CENjQrjAWJ08URowe/Iamf4XnVPuuAQAAGhKeAXNlmjJvs5jpQW0m1PfWP9WbhBj3/IvVSam1dFTpDsiqtiXu0ByIKSPzG+dqpMqeetsf1GtEZxmU0wGhlrP2hJ9XuvboQok5XfGu9o1R78VxV9hoyPG/Caz+gnl7amvSr56uYE83ang8f7coRKlwOO0E++FWOTHTFqyL09cdMeZldsR5tpPq5DBzERe77A7VvX2hnTBg3Q61+oflm0LN8WOIaDond3o3ZSdsWVpsfmLfP8dSNm/xhhhj/ZsROjbagdgg+RAqh5M82yjmaqGP/3yXTe0Z0tDBGmgfo5dpv3uAriVZL/8C20nnzmIRPUwRY2GZJ/8ZeIhhdHQD7+/VvjrDXazG6SPnb2koJRc5vSE5HShAaqOy17qJvpS04ng7zqKp1ITK4bDoW4NjoCw3i2sOqudYmACqCEs81XG2lTxd2yoH5uzP33nsXN1TqQxXgT49nLN+zgwnICDe6RP61Z9Ip7jEtSy7MzyHz8eUoaTXfCOAG1Jet4="
	publicKeyString := `{"alg":"RS512","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"jcgAXfPQzm3A5vIWzGfEB1BKilHN7Udn6c7n6-R_nKDVOSLLXwi7iPuSSabfr-enr8nAa-sjOYu3ddgZiCW5AXNveh57vLUDeEZhsPvDHvdqWFTcDgc8aN3k0NsXTKp5jD3wZiXEr0sSX0rcgVLiHUaCRKvO9AR3Dg1s6cpH1CN00AdQnTjydXwRnJHV_if-P1OZK_-2sfDDR6nlvqNLqK39lFvA_btjeL7yP-jrJdqWFu-cxe1i41WMiHZlJu6D0wSWga3XLd4BGhE8tOO_jAk7xN6gjaztrpuZC-S3-unlBtvGgBD9nvdcXrdwsR2ttbjDpNg2A3Z2rMx6y6zl_jlxmZ4bc_RejZ7IZJlkTFPOp1aenIwYW8zVFdNKtplpGynTKdBkK80JYM8Dht633DTL5WpfNxBUR2Y6ECWe_j1E7sJjdWeadMSxgzA1ClV5laQaEYsU7N5tRG3IydN2gB050a0vCh2MmCIVVjEWVBtVAuSbM0-Oix8cxEvWYLpwKwon1Zunmti3YgzZ_Cpdmfcd1sf1Hb16iwohyMl9BIJfTC0t3A-6FwKw4GX1yVqRbnkt4dKYZfA6yMDbT5J-WdSaYDBtG42poJko-RVNNT6-vsP9XurHQjxk1EOUvg6sEfIIAgs4s_EAecdzJ9fN8AYcsMUQ8ysdDnE6MgeUghc"}`
	payloadHex := "g6RuYW1lqEpvaG4gRG9lqXB1YmxpY0tleYajYWxnrFJTQS1PQUVQLTUxMqFlpEFRQUKjZXh0w6drZXlfb3BzkadlbmNyeXB0o2t0eaNSU0GhbtoCq2xwbGhveXQ2cUNFdllJZkN3blJ4MlViV3JDeDNucEE4WkNIWHlyR3pzNjFnUmhiSVRsR3dDV2xXSzh0ZUhHaUU3akl0X2JqMmRpRnR3RXJOc3RnNXpVSFd1T1NFa0k1YjBSM1E2SmRjVDJpZ3ZsLXFXblJjQ3Y1dHlfNm5Ha1BKLUR6UHBENGl4THRBams2YVZHZzhzVEtSM3hKbVpTVkxSVGF6dmxpQWJLSVlpOWlJU0VTWDRYbERYN3hCSXFMZjF4cEZlUVlEa3BiMThZME9SRW1SMFB5QUVhU0F1NXB1STNRX2QtV0Q1LWNjenZjaFFKcUFhdWsyZjJHV1NxS1YyQXM4UUxzYkF1R0pfZDNJZ252ak1hUXlHRmV1YV9MZmdvZ3NQeDlOQXlvM1JIV3ZPRHlVT1lPRDFCRWk3VUV4eWltY2dDRExEVGZ2SHAtblZTU3B3ZEpPS3AzTXEyVXNLM3ZPcmdkQnNwejJwNUpsZmEzMXFaWldrTFBSSjZmbHJsUF9iUEdnUEJUMWZ2OWhyWGhIMks5SDVyaWNaa2VnczBaVVdEVkM5N2FUNkF2cWlVN004aENybC1Hb2FfQXc0RWNhdFFDamM0X0tCaW5OSElTVnVsM2pYaUt1S1c0ZzFiZW8wUWZBZ0RWa3l5NHZBdmhLQW56U2hzQ1FiUzRPTWVyX3hCekdSQXkwSnpyNzNrN0xCb2JtMGVtN2pobGZ6R3pVOXhseThfczhSd2VaOGE0ZzlXbGt4djh6eXFQVGRqQmpLSXhuc2dLV2k5Zmx5TDI5QmI3aEY5T1dlYktON25SeFVXMDc3Y3VaOWFPYm1CTUU2ZmRuTkNsTmFIT1NnSHBidWRlajR5TEVtcmRrUUItaHFraG1YblFGMXgyMTM0OElWMzB6MnJNsHByaXZhdGVLZXlIYXNoZWTaDGBVTHZ5T00wdUR6Um8yZndBRWhvV3hHK0pZOE1rYUhxUWNTYlJ1NjVqeFZTOUdGVkVheG9UQ0ZmNFdvVzcrNlVBQzFCQ2w3ejU1Q3ZNQlI3SjFHRllkMlhJTzQza05WMkY5dFNNWVphUG1yakxjenY5YlRJVWUxK215MHBWNWJhYlE1NGt1UFBlN3FlK3lzb0J5dnJmZllBdU5GeDArTUh5WXFVbFJSWnRnT0M2U0M3alZ1L3pzWElHWkx2V25nNXV5M2R3ZzJzYkRHUEtPS29EVllWbmNiSkhEc256cDFYUGhYQUVqV041SEJuVzB6ODRoOHJFRzNkc0VIekpaRSs5YXJEK1lKQUtLanFnY2NWdExPMEFZWnlGYVVMZ0t6eXRMYWFWMWxjT2lRZVA5YlE2eFc5SWNTOVlEL1dHUWNSM3F0cDVTZGJRZ0Jtb2JwNzhwOUo3N1ZBbXdjbFFYWDAwQ09ZSnN0TjNDRFgzYnFkdWxMdk53SlJZYWN6YkpxL2U5U0kwa3FMTkNqR1Ntd2F3UGwxV0FuMXNZMk9oNXJqYzNUcURYT2xPcTg4RGJtam1lamU3Ti9qZ3RFSnduY2twZFVBLzV5MEg0OEMvUWFKaDlSeHhpYUozcnBiS1hnSm9kUFVQNDVVcFJ6TlJ4elBVZWNiSlgyODY0MzBYZEdOKzFoT2RmZUFHUkNwSWwzR21HSDJTdm9MNzRDS3RDUWxXUHFaZStEUGhZOE5LUGR4WWF4QTcxSEZ5bWRQaGZPWXFUL3V3Z0dXRU15bW42Q2ZRd2FUOVI4bDMxM0t5Kzd5U012MmRMWDBWNEdNRDJnbkxLNlZLS3BQR0RqSm51V3YrWmp4dWRNQVpnSG5ScU83YUhnZ1Vrb1dyNnlIMGhZWWt0L2psamU1amNoVlF0b3VUMklYek5pdVFQbDVnODNydzJkOTE4dUVrQmI5MzFxUGRIYTZDU0cvSHZza0dWektlVnRqL2VNMzRWRjBIbHhpVWorYmh2QUF5N2xzL0dNMjczZzhkYzhoeVVlcnZaZTVwSGYrK1VzRjZZa2NYNzFyNHNoNEpUbnkrRVRJMTlYVnZXdEkwLzdVR0lPeUpXVmxkSXBVR0lqZ05mbEJSTmdXangwNC9FQ1RsNmdYNE1TZzJPRm9XcFJYRkxNd0VaZlN2SERMc2owbnBwb2xLTmhSci9DUWZKK3VPMGFISTUxZ0NjT2laL0pMYmt3dFB4SXJrTHlORzF5YlFRVXQ5NS9POHh6ZjBBbm5pUHY1cnZmZTIweWlSSmRRY2FwREFQVzljcGpjcmU2allXdGc4V2x0TmhUR1NrV0F2d0NXdktKQ0QrWkgyL3Urd1BxL0hDa24vTUs0RnJId3B6M3FvQnBwa0Izdkw4bVR3V2h0Y0tBbWpGYUYwNTVqUlpLcE9vZ0s1YWdPOWozc3JMbjh0Sm5EYlk4TVB2clJoTXZ4RjJsU3d2UFd0Z05iWE4wdzlVMlVXMm9mdlRMbmpYTlUzd3BNVU1hdnUwTFdUcHA3T0I3dWNzTHVhUGpsbUovOGxYTVJEQ2tIL2F5aFVDUW1ER3V0UXRjbmVpMW9PaDRralJrQnhFQnNhNWs5VFEzZGNJYmlQM3BmTlFXU3RMcW5PL0l5UENaZXNuMHVDbFJCOGV5WnFlWHhlWTdQNzl4S2tUbk16cDU2OFhkNk80OFIxdnVISjhmZElVU1VEbkl3citkQWtkYzNzZGs4TFJ0K0hFS05GSHdRUE51Rmd4Mm1HUTNWQlozdkJ1RC81YWRaRTZZZGFDcUMrM0dId3pqQnBiaEtZZlA0UGZSRnNiSG1OTE11b3h1TGF3djhEdE5IZnNLY2ovVWc2aVBRMnNSUkkzVlU3eTR6NzNvV3ZzRGt3T0kvdDhpanZleVRzRXdpT0xWMFgvc0dDenlsU0xOdnZsZERLQUFDeFlxWERwR0tyTTg0clJvNGZ2T09kazBNK0NXOTZTbUYwNnNXTUEzRTRXTTc2ajlMLzdHSmFBblZlbUN0WVNialRKcUd6UkxKczlsSnU5L2xsRzkySXUvSytOdGV1Q01GS3pFSXlOQitVY3MxdFBFa056RzdqTFpVSWJqUG1oVVNmWlVhNWFGeVlqZFY5eXEwTlhMZHlPRml6Z1I0N0x3M0hiMDNVUHZ5d3JyajdMSWhXM1o0TEtFbUVldmc1Y1lrY0VlNWMxaWJSZXlnQTRCOUp1UU5QUUR6d3NMVzdiM1VPY0JRM2F6cHhNWlNjSkIyMXlnOElnVWZMZ09JZ0xqNjRsa1RUdFN5TGcxMUYxbHBKdG0wanVXSFJ0SFI3Sng4RUFpbE96eHBwNkpvaHZ5cVVXTUtVenFmZ0dGSTlXUzNOTEs0SmVGYk13NExZR0lXQWFvL2U4NEJ2K3lWQWErVkJBYkxlRlZTTmRJdjlmVkcyUVh1alZNVlFXSis2NWdlQnNlQzRTYkFaakFld3VwZmFSUHpKMW9WbTFBYlpCYVl3U2xCZ3o5Sy91QUk0RHZuNE1LQUVDN2VEdHVPOUhBTVJSdndoL1F1dEtjVSt2cFdPM3hOcEpIVHI1Y0xRZGtJNDlPVEZod0FNSkdjbkZiZVJEYTVPb1FmUnFrYmxTMWxqT0dhNENaVVQxMlNrS09nenhFc0ZwdjM0TjcxbjZhUUV1TW9UMXdkNXVGUXpoTm8vYm1UaE9lY3RqYUlwSy9kUUpydW4wK3A3VUREMW45OTkzUUFkd1J0bmlJOFYwTGd6V2FOckV4WlBNQTRIb1Z6d0daQnRNdXpDWmpUOTR4MUtINzVvbWhXN3ZpRU1KbFovZGFIakppZ3BkdVU5eStJb0c4M1lITTY4dzBVdXc1d0l5N2Y5Mm44T05NdlB0eTB6di9MWWcwUXBVL1JZM0hTcmlkMnpaRWVNZ2gxNUpIVDNYSnZFMGdzWFkrMGREUU50R0pZVkVnYU5LU2tmb2dUSGdLNFY2dkNSbENYTlJ6VUdoYzNab01mdTZPc21HQXQ4cDVzSGRrQkVDMXpSQTVsV29RSlRjdWdVS01mbFBhT0lRN3RNQ1NoRTk0aWtyS2VMeXpVbHdsRStNSUppK0wwV0g3R1FFUTMvdmo5d0VxR2prWGg0MUJVQ2JRWGJoZlYreWkyNlBudHEvY3Jqb0VQNGdkYzR5YndPMTNRK3ZEQS90eTE5djdYR3djc002cnc1dWNLRXNYQzUrYitJaEFRU1cwV09QbmR3aXd0clBCb3Qyb3JlbG9mRHFabFpxbnM2ZDRWQ0lRaTVURisveXkwMGhMbUkvL0VqYlFaZFpsNzFCMFBjbmdzTThYOThrR0RkaXZUelM4T3hYWHhxVllCZWMwSXZnTk9XZXJBQ2tZUElENmh0OHBUak5oRXJjdzN1UUdZVkdGUWtIZXRUYmRCRVNMRDVmWnRseE4yL1BRQms5L3g5blFnczZ3T3k4cytTUzExTjFxNzdjdXZQZk9NYXZ3ZjJ1b0VpamZXOGJzK05xNkpnWW9kdzdJMDBVdklqM3RlL3RSbkNHZmNDYnRHeU11Ynk1dlh2YUtTVlNuL2tTSEdHOVdUUlBBbWhsYSs1RTBRZVluR0VySXpzNDh5ZUV6QmtsR0pkbjd3dFAzaks4UWVhekc2OENGSlQyVDZIQlVwQ3FTWXoweVJseWt3VlVaVE5Oa2REMVl2T0s5M3hkTnhVTG13eU9kWEpPZ1gxdFhxR1E1LzdRM2lLUFh2OVdVOWZoWkprWGZoQng0Z1hmNmxMbnoxcFdCZ3FUbnlBYW5DNGh6YmU0SkFsS2EwbjNVZjl6T3NhVk9oTU5qMFYvZ0xiYVVWVG5wdTV6NXlUaWZWMUViWEF1VmdPUlNzcTY2WXYwWWRmdDNKcUNaeVgrR3dyOHdOTTJ1bWNUNzQ1YlM3QnlWQ3Z6cXg2ZHdiNkdBa3pUc0pMNVJoaFg4eHFBRGtBQ2RyaFBveXdHT1pmTzJkenFTUFBwOXVrYkEzY3U2TDhHdzdWRHlwWEo5MnVqeCtDZVV3Q3F2dFhFQ1A0WlUrY2xNU1Fpd2pGcHQyK3BoY2YyS1A2SWx0d0dONEZHTzdmT3dnR0kzTVVuN29VZUxDOUppekNDVlJJdzVqMjUxMm04L2RNUDJSM2RBditZR0t0TmxNRU0vcWpKWGdhaEpPaGQ0aXg5Qy8zNDcrNUpGRFlQaVFxdEF5SDJDZTgrcFJRK2VaKzY4ND0="

	payload, err := base64.StdEncoding.DecodeString(payloadHex)

	if err != nil {
		t.Fatal(err)
	}

	err = VerifySignature([]byte(publicKeyString), []byte(payload), signature)

	if err != nil {
		t.Fatal(err)
	}
}
