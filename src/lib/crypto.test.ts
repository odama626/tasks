import { test, expect } from 'vitest';
import * as aesjs from 'aes-js';
import {
	createSymmKey,
	decryptWithKey,
	encryptWithKey,
	exportSymmKey,
	exportUserKeypair,
	generateKeypair,
	importSymmKey,
	importUserKeypair,
	login
} from './crypto';

const userStorageKeyPair = {
	privateKey:
		'50bbf239cd2e0f3468d9fc00121a16c46f8963c324687a907127d1bbae62c554bd1855446b1a12cd331d0847495eda49edbca9459a289f3b18402a01e8feefb56e13f17d4e76c02bf697815af286a2297df2e73a032571f1e03f06b07fdd4f87eee01ff8a9dc4f3dcebbeda4dddf32b12d27e63aaa7ee0e35474bfdbb84214987355783b111a80327b600415d7d7d05c4e4b96887da61e7f5cb88e315be706119858f7196e6e961c17d0f7dc64076596276d156668c5abbdb33e9f5dda2df63ce913a43ee0cfa2ac1f9d53282da9ea77ef4394abf8d71dbfeb3ef2baa70e32ae4f66f88ec5d754f170788f5c49f65b5c48aaed48892f058950dc0880c8a61027956a8a0722ba64887ef94656d6b139000f9bb8dff044808f5f31e7918397a2f41d35f4de97214f0f1311211f0ad0eda67afac960ce061bb6130f367600a02b36020a5b98444a016e8583a7d88b8d7f806afc70191a09262b3a329a8bad62553b33fad2dc3d7ed0d439667f285685152273dbc1d939a803a55ce0aca082cc9dfae6d78206542e568a27570b3948830f93758835a1d841857f0757bcd1e58d4a815a100aeed6bccd1a822df799b1d0b50090de56ffa57a8c05da6169b6a9eebfb581a9532a5170ef9c7d9409bbca8756b5dbef21c62dcaf4f4ad779c6bc2bfda75b799440457044eeae505990ea7ccc76e897eeb7a11ae2733f19d65113219de14f69324b7763c54921544072436309890a647e167d8042a65fdb7cafc52ebb9292d8e4360bad1329e56d8ff78cdf85458eb402096be4b4ca476bb00bd33c69dcf036dd2fcb845ab88d7bfa7fe68da52e43b65d396f5c3a1a6daded0fdb21452ac71866207957ad5a633d6a148d0b97efbe9e292fb284cfbe6d357cb7d182193a5bd9b1bf08ef8da003769e229b8bc022df8db7b7ba4f095d17647d9dc69320eac06dc1c6098ea144be9fb05fee1787a626c28ed4317457b5151b7e12c482a9f9c9351dec0bd573c976642097778abeb7c6f06dd4310088548037a1782b07b43814b87e8da2014a639e921239e7a2687e343cdb2f39f34cbc4749d117bc8906258c94b38e8e3c8e643fbecc1f83b21ebd52f305b8e2f5d2e94a7110d2678a037f606a273ca6741c4d1dbe3c87ac2300cba74df94183a083f8b1bc2a06ab98e6fa69b6d43de3eb7a582fb1008b568743a9374bd1d2016b9c49828bd03ef9e5bdc7ea2b6991c12ac606aa10dd1070f002132e5a9220de863cee9f6abf066c21e08aca012356c4e6a2cd7165929a46a40e55f99cefe8f5c7753ae0c49f3e890ed59c6a5532a3f8fa449034b9cf4ad6c7cdd0e9b752ec4342076f961dbb85553a979c2cf02cd5115ac075a51ef0b61b8bf2cc6ffcfeefd9e69022b561cdce993a72d659d0058f28842d0e107d5d17f29fdd92b5d89d3f42696cef4256690a2e00531be9443c5a7c44732f980597c19b5756c5a4cf9c70ff55a2a038eb8c9fd2e11af9007773de73f098679e23c4b89d58f477b24ec13089bb01a611b770e72e9b037b20dfe0881f0a4fae7fc2bbca4d1ab8b91a7c1c1889118770abff6a1bb9b66128a8f58c2b8aadac12609a7a4e8ca2cfbcafca86b12a1cb9f592034f0a93aa2fc86ec5d58475c3070c64ce8cd6cbbd82d1c0e29408cd20a4050088bbb974d3890ddda8d69c6b2870208d62b9dbe4ea5050e75548879d42ad12afda8b079895b4febb75f40c623474766d8f4637b303a231656c3954b2af56416ea3301b04f33eeff65380b07da6394f252f584a523ddd0ce21728e115470cd0d1ddbe50822ca7c07400833afc17d249eddb1b8b728c1072115882ada6f8f827dcf9958bce85859ebf978e981a7d4aa2d943e51592fc89bd3069804d7592dcd2cae73b5d1844ff8bad912aab2d882c808cf544d7a8175e8f8b6a1d96afee2b2632190f84fc9aaf5d7864c3d755d5314de7a55e78602d569409bbd92cda4d7b9874c23f327ac3bf2fa04ec41c9fb98d4c7983dbadd5149bc7069a64462dd02fe38373b96b38cd88036c406730b7209be9de94a2c48571e93928ef43da03467d8d4a9c9fb0cb43825d6bc7f6878c91ab9ea1b8b88e48e5a3edd18082fa0628207175fae3e2a7c5bc4a1a6bb32f9c2f0b8b712a211a50b1f1b854a5b937bb1261f873c071916ab6adbb912b09fe36041e46049d94277680a80ceabb5862e0edf69297cdb63a36dd8156478c05a5a68d2585abbd60ce20cd697f2c6ec655269954f985576e53dcbbd4dc1aabe466e71fde4579208de60189dc654d9988445cbf0e0597a6706cb225b2d57826e6ea19829c9610781852e7f97b80010652bb146812207ed809a344c27aa6a67c3de8d68c9a2c762bb7481a3ae3e6757ec4643ad12c35b91ad50f7c311257b74dcc36609eca61c5fb785ef85c46d8aa6e8121f01152000ed53e0b4f04ebb258a4ba583af2eee5f4293e3392113406c6e53a4eafe97697c95d71cb7298310d59ec847d9da1a6f5dffe1a7520a2f05e9f899344317b9a160ad9b5bef9c48139b7909239eb3c9fc67f228898c13bfeee132861d26d03cf93958d456679b93a2d60f3b0d90d06dfe20b60eb0bdd9004dbe8ae741e8f21ae2f5ba029e676588fff1236d1b6c913e699d6f92d0de812e7559ae219ee5ad758d5beb5240e2386f24b951eb3c5ac3f08e08bf724d54bc28a277ab4b5f18e3ef8f4a3d837b99bbf1066809b1632b501827f4e67cc0d5535a809e5001d9df3d4930bfbe90f92bc41b4f281d2ea20b87bbbcfbb554fb9cdc81e6c027649a4488678ab1cf21b472b31ca73e0b7da63267c95742a08c60c19eb132793969b8b28097d84c06691a597e6c41bc332d1b0c96662557ce4728b40a37f4015b824acdc05e1a11540c9a3f58b6b638dd7f5e672839eb5898430c42c473a78c6fd327f4476daaa8b1de624773bf45a0de8f3f3a6a27b932cd5d9978921f535ae3cd5466ba0fa7e1753891283ffde278cd68177fa94abcc478a876cc90a735e8a0519b5513cfeb4f079cf91207b69505d1b3bfc28c62253c4ba6959d8ea9a730824cec64f9399465995501e01d3202564a084b81c52da8b1dc9cc969392b413023dc7429023976f60f602daea0f01095e0eafc416ed51431d8df3accebfafabc415ceed66713b799e35070d1a6233aaebe954d6f7b75dd9457aabcb5ccd71562e6fd9e612ccf9b4158befe5b1862326dc6282fc877eb4864034138ae0c20a0608320b7d237457b1c08d891f648918e9867bfb2ee1d04dc47414e15b809ee69940dc4285834173f269fca045c5fa42acd21d6fbbdd75e578ad5e1690c076035adc9d4d56c23794d57625d5fcd06e0829f96e9f607b394',
	publicKey: {
		alg: 'RSA-OAEP-512',
		e: 'AQAB',
		ext: true,
		key_ops: ['encrypt'],
		kty: 'RSA',
		n: 'l1wFRnm4WoRQKWEuKaZXCD3GeGlDVqyj0-PcEXtDGe796BaLQ2rUAFHHnUqC2waTi7iSZHUMXBmU3OeziZhjz-BMyJWjNZl-PNF94UU6ke6Br2l7wOryJWoVAuPxwgQ8i7_Gwl6MxfKevMumsmMqDCCNSZJCVyspJFaZoaFQ8WvbWEoouxWQnwDMrgJrfE3QuLyBK4kigd9McA6tHhfhFXQWrkgW_psqyWJMsRhq_xs93DG5J_ZwalKfv_La_qItxItjYDuyzVYW1j-4Fnq8ziGi4OU4F52r6ULpc1SDcc0u-AOwd9iR_7K2LOQ9XCXOh2ZX6a6WVYbiNHewlWicLZdwqxfrBFGhkN_JOK1C3XxVzVxQyIccRxavkdfiWZmYFAqCD-I6xwRD1-Dd4oZw1mqsY8ukjB_el_TF1UkIAJZBVEZ5-YUPXkK6tf1aZrBeKr0pb09-5jc0ghkJA_8hkk9DMeLUtj7eSJpfotJD9X3o4hfe4NGcblWQlu1G25OixyQMm3KMFKDnDeXeODEL-DnKrGD16HEVjp6cKZ0qEHBvSUjwZTiXZ9-yHsobx6W8yO5dmR4-FwQnAAZA4s0qGHByI37hrQtJPYh9hG1gCOA44uX-GI_Yk1tmkgziTN0rJ95lbe7ZteEm-sj81IqYime81BVs9lLw5O5KHoCaZjU'
	}
};

const salt = new Uint32Array([
	1370921999, 362000921, 1401009754, 4262136113, 2710957243, 1794858990, 2125776193, 2181252641,
	3689540781, 1877738531, 3132070000, 1919055809, 1447966125, 2608881379, 3006453550, 792443570
]);

test('hash', async () => {
	const password = 'test password';

	const imported = await importUserKeypair(userStorageKeyPair, password, salt);

	const exported = await exportUserKeypair(imported, password, salt);

	expect(exported).toStrictEqual(userStorageKeyPair);
});

test('register', async () => {
	const password = 'test password';

	const keyPair = await generateKeypair();

	const exported = await exportUserKeypair(keyPair, password, salt);

	expect(exported).toBeTruthy();
});

test(`login`, async () => {
	const password = 'test password';

	const keyPair = await login(userStorageKeyPair, password, salt);

	expect(keyPair).toBeTruthy();

	await expect(login(userStorageKeyPair, 'wrong password', salt)).rejects.toThrow();
});

test('page key', async () => {
	const key = await createSymmKey();

	const payload = aesjs.utils.utf8.toBytes('Test');
	const encrypted = encryptWithKey(key, payload);
	const output = decryptWithKey(key, encrypted);

	const result = aesjs.utils.utf8.fromBytes(output);

	expect(result).toBe('Test');
});

test('page key import export', async () => {
	const password = 'test password';
	const keyPair = await login(userStorageKeyPair, password, salt);

	const key = await createSymmKey();

	const exported = await exportSymmKey(keyPair, key);

	// store exported key in db

	const imported = new Uint8Array(await importSymmKey(keyPair, exported));

	// key loaded from db

	expect(imported).toStrictEqual(key);
});
