import { test, expect } from 'vitest';
import * as aesjs from 'aes-js';
import {
	createPayloadSignature,
	createSymmKey,
	decryptWithKey,
	encryptWithKey,
	exportSymmKey,
	exportUserKeypair,
	generateEncryptionKeypair,
	importSymmKey,
	importEncryptionKeyPair,
	login,
	generateSigningKeypair,
	importSigningKeyPair,
	verifySignature
} from './crypto';
import { encode, decode } from '@msgpack/msgpack';

const encryptionKey = {
	privateKeyHash:
		'50bbf239cd2e0f3468d9fc00121a16c46f8963c324687a907127d1bbae62c554bd1855446b1a12cd331d0847495eda49edbca9459a289f3b18402a01e8feefb56e13f17d4e76c02bf697815af286a2297df2e73a032571f1e03f06b07fdd4f87eee01ff8a9dc4f3dcebbeda4dddf32b12d27e63aaa7ee0e35474bfdbb84214987355783b111a80327b600415d7d7d05c4e4b96887da61e7f5cb88e315be706119858f7196e6e961c17d0f7dc64076596276d156668c5abbdb33e9f5dda2df63ce913a43ee0cfa2ac1f9d53282da9ea77ef4394abf8d71dbfeb3ef2baa70e32ae4f66f88ec5d754f170788f5c49f65b5c48aaed48892f058950dc0880c8a61027956a8a0722ba64887ef94656d6b139000f9bb8dff044808f5f31e7918397a2f41d35f4de97214f0f1311211f0ad0eda67afac960ce061bb6130f367600a02b36020a5b98444a016e8583a7d88b8d7f806afc70191a09262b3a329a8bad62553b33fad2dc3d7ed0d439667f285685152273dbc1d939a803a55ce0aca082cc9dfae6d78206542e568a27570b3948830f93758835a1d841857f0757bcd1e58d4a815a100aeed6bccd1a822df799b1d0b50090de56ffa57a8c05da6169b6a9eebfb581a9532a5170ef9c7d9409bbca8756b5dbef21c62dcaf4f4ad779c6bc2bfda75b799440457044eeae505990ea7ccc76e897eeb7a11ae2733f19d65113219de14f69324b7763c54921544072436309890a647e167d8042a65fdb7cafc52ebb9292d8e4360bad1329e56d8ff78cdf85458eb402096be4b4ca476bb00bd33c69dcf036dd2fcb845ab88d7bfa7fe68da52e43b65d396f5c3a1a6daded0fdb21452ac71866207957ad5a633d6a148d0b97efbe9e292fb284cfbe6d357cb7d182193a5bd9b1bf08ef8da003769e229b8bc022df8db7b7ba4f095d17647d9dc69320eac06dc1c6098ea144be9fb05fee1787a626c28ed4317457b5151b7e12c482a9f9c9351dec0bd573c976642097778abeb7c6f06dd4310088548037a1782b07b43814b87e8da2014a639e921239e7a2687e343cdb2f39f34cbc4749d117bc8906258c94b38e8e3c8e643fbecc1f83b21ebd52f305b8e2f5d2e94a7110d2678a037f606a273ca6741c4d1dbe3c87ac2300cba74df94183a083f8b1bc2a06ab98e6fa69b6d43de3eb7a582fb1008b568743a9374bd1d2016b9c49828bd03ef9e5bdc7ea2b6991c12ac606aa10dd1070f002132e5a9220de863cee9f6abf066c21e08aca012356c4e6a2cd7165929a46a40e55f99cefe8f5c7753ae0c49f3e890ed59c6a5532a3f8fa449034b9cf4ad6c7cdd0e9b752ec4342076f961dbb85553a979c2cf02cd5115ac075a51ef0b61b8bf2cc6ffcfeefd9e69022b561cdce993a72d659d0058f28842d0e107d5d17f29fdd92b5d89d3f42696cef4256690a2e00531be9443c5a7c44732f980597c19b5756c5a4cf9c70ff55a2a038eb8c9fd2e11af9007773de73f098679e23c4b89d58f477b24ec13089bb01a611b770e72e9b037b20dfe0881f0a4fae7fc2bbca4d1ab8b91a7c1c1889118770abff6a1bb9b66128a8f58c2b8aadac12609a7a4e8ca2cfbcafca86b12a1cb9f592034f0a93aa2fc86ec5d58475c3070c64ce8cd6cbbd82d1c0e29408cd20a4050088bbb974d3890ddda8d69c6b2870208d62b9dbe4ea5050e75548879d42ad12afda8b079895b4febb75f40c623474766d8f4637b303a231656c3954b2af56416ea3301b04f33eeff65380b07da6394f252f584a523ddd0ce21728e115470cd0d1ddbe50822ca7c07400833afc17d249eddb1b8b728c1072115882ada6f8f827dcf9958bce85859ebf978e981a7d4aa2d943e51592fc89bd3069804d7592dcd2cae73b5d1844ff8bad912aab2d882c808cf544d7a8175e8f8b6a1d96afee2b2632190f84fc9aaf5d7864c3d755d5314de7a55e78602d569409bbd92cda4d7b9874c23f327ac3bf2fa04ec41c9fb98d4c7983dbadd5149bc7069a64462dd02fe38373b96b38cd88036c406730b7209be9de94a2c48571e93928ef43da03467d8d4a9c9fb0cb43825d6bc7f6878c91ab9ea1b8b88e48e5a3edd18082fa0628207175fae3e2a7c5bc4a1a6bb32f9c2f0b8b712a211a50b1f1b854a5b937bb1261f873c071916ab6adbb912b09fe36041e46049d94277680a80ceabb5862e0edf69297cdb63a36dd8156478c05a5a68d2585abbd60ce20cd697f2c6ec655269954f985576e53dcbbd4dc1aabe466e71fde4579208de60189dc654d9988445cbf0e0597a6706cb225b2d57826e6ea19829c9610781852e7f97b80010652bb146812207ed809a344c27aa6a67c3de8d68c9a2c762bb7481a3ae3e6757ec4643ad12c35b91ad50f7c311257b74dcc36609eca61c5fb785ef85c46d8aa6e8121f01152000ed53e0b4f04ebb258a4ba583af2eee5f4293e3392113406c6e53a4eafe97697c95d71cb7298310d59ec847d9da1a6f5dffe1a7520a2f05e9f899344317b9a160ad9b5bef9c48139b7909239eb3c9fc67f228898c13bfeee132861d26d03cf93958d456679b93a2d60f3b0d90d06dfe20b60eb0bdd9004dbe8ae741e8f21ae2f5ba029e676588fff1236d1b6c913e699d6f92d0de812e7559ae219ee5ad758d5beb5240e2386f24b951eb3c5ac3f08e08bf724d54bc28a277ab4b5f18e3ef8f4a3d837b99bbf1066809b1632b501827f4e67cc0d5535a809e5001d9df3d4930bfbe90f92bc41b4f281d2ea20b87bbbcfbb554fb9cdc81e6c027649a4488678ab1cf21b472b31ca73e0b7da63267c95742a08c60c19eb132793969b8b28097d84c06691a597e6c41bc332d1b0c96662557ce4728b40a37f4015b824acdc05e1a11540c9a3f58b6b638dd7f5e672839eb5898430c42c473a78c6fd327f4476daaa8b1de624773bf45a0de8f3f3a6a27b932cd5d9978921f535ae3cd5466ba0fa7e1753891283ffde278cd68177fa94abcc478a876cc90a735e8a0519b5513cfeb4f079cf91207b69505d1b3bfc28c62253c4ba6959d8ea9a730824cec64f9399465995501e01d3202564a084b81c52da8b1dc9cc969392b413023dc7429023976f60f602daea0f01095e0eafc416ed51431d8df3accebfafabc415ceed66713b799e35070d1a6233aaebe954d6f7b75dd9457aabcb5ccd71562e6fd9e612ccf9b4158befe5b1862326dc6282fc877eb4864034138ae0c20a0608320b7d237457b1c08d891f648918e9867bfb2ee1d04dc47414e15b809ee69940dc4285834173f269fca045c5fa42acd21d6fbbdd75e578ad5e1690c076035adc9d4d56c23794d57625d5fcd06e0829f96e9f607b394',
	publicKey: {
		alg: 'RSA-OAEP-512',
		e: 'AQAB',
		ext: true,
		key_ops: ['encrypt'],
		kty: 'RSA',
		n: 'l1wFRnm4WoRQKWEuKaZXCD3GeGlDVqyj0-PcEXtDGe796BaLQ2rUAFHHnUqC2waTi7iSZHUMXBmU3OeziZhjz-BMyJWjNZl-PNF94UU6ke6Br2l7wOryJWoVAuPxwgQ8i7_Gwl6MxfKevMumsmMqDCCNSZJCVyspJFaZoaFQ8WvbWEoouxWQnwDMrgJrfE3QuLyBK4kigd9McA6tHhfhFXQWrkgW_psqyWJMsRhq_xs93DG5J_ZwalKfv_La_qItxItjYDuyzVYW1j-4Fnq8ziGi4OU4F52r6ULpc1SDcc0u-AOwd9iR_7K2LOQ9XCXOh2ZX6a6WVYbiNHewlWicLZdwqxfrBFGhkN_JOK1C3XxVzVxQyIccRxavkdfiWZmYFAqCD-I6xwRD1-Dd4oZw1mqsY8ukjB_el_TF1UkIAJZBVEZ5-YUPXkK6tf1aZrBeKr0pb09-5jc0ghkJA_8hkk9DMeLUtj7eSJpfotJD9X3o4hfe4NGcblWQlu1G25OixyQMm3KMFKDnDeXeODEL-DnKrGD16HEVjp6cKZ0qEHBvSUjwZTiXZ9-yHsobx6W8yO5dmR4-FwQnAAZA4s0qGHByI37hrQtJPYh9hG1gCOA44uX-GI_Yk1tmkgziTN0rJ95lbe7ZteEm-sj81IqYime81BVs9lLw5O5KHoCaZjU'
	}
};
const signingKey = {
	privateKeyHash:
		'50bbf23acd2e0f3468d9fc00121a16c46f8963c324687a907120d1bbae6dc554bd1855446b1a15c67235e0905b24529401f809b6945e3bd057b1cac0c3d6f0143ce08dcc949ede03dcc34e4f416757b834f49d98b4774abc9877316f2f9cc5a0751a64179aed9594dcef6571762a7712a15d905cbcabe65af168759656ddd1418d392e61f388e3100fdf174c187f62c4da8faa7866f009e335f86233577622eef82a97915585b82b1439447a0a4b31787575abd7e64f6ab9e070968ba3e42e2962a865460b7c745abc95f9bc7900915c879ff9f79a76030cf26d01d53b92ed6b5f666dbe6e685fce20572805a07338051bfb7bf78267eadee94afdffb680df570604a85282ffd65f9672b4beb95bb59fb7a51ce46225c15eef5c7ecc5aa2ccf2040b8e8457ebe55a785cb96ff1a01a6c97cf79fcb75ba8184e1a4c9b6e822fe0b4e4d218f22f3c13104c0d110480cc5d6c9c21e4689a1b2db6ee1e7f498ad112d107eca012acc2476e7ecabec416d48710159b0ae8f5c481e1d79a6228aec029716685da05afdac3fe645ba2b386f36682d5e6e099b3984ddd06e49e14ba5f0a3cf23de527932693156f4e41dd252f8a0fefe777e3a68fe440f977fa0b89682f918ee0e907ba9d5a68475aa034e8718555d3bdcd393eeaa5b635f3c9b30a136b89fae5ad9bb7bd14042e669d4ccef01ca4f4097fd6c8e086f3bc847dfb639cc8e034528ec58d73ba7d58e7fc1ddb21966eed991113535e30d3b93171d9964f3bb715e5773f2b329e56d8ff78cdf8545efde915ddf3e343935b73b5ac1174b88cecd8f463ea4db7753f3b81c1548d1d8edb6737f3903da5255cba50b4c5ca17b1206bfc4990e0dbe9576dfb32682c2f6d192ae8992837c91db129e50d24f83236e4d4ec2be2465308e75eabc4475438cf9e7e3b0dc0dc11b6e3667d81051d680f9de70fd818e807f6aa384f44fbd9d69c285a71a723c598cca60ff5dbcf0e1699e8a028dfcce61971bd0a8164a5936e8ef2e642a8dc4d30160a01bcece3e16b17120ee13c4476f032b03a1f4e3ceb863af0a43b364f764efe8433bb12269173ba65b720f32e800159f7f52d88c3bb409b278a82c99b84bc3dbd3a932fff80d69dad15e7f30aa405a8075608fc3bfc1d0fe703fa81bd2504eee977b297eaeff41397bd1c9359eac88b951064f152481b4a84969806638d49dd6c9a9c53c6415168ad6421c0920ba976ed634e9b5fca8a95c32e08ed6d3296c17817553bf35a64a8156c3abaaca511c9254cd5267aed887325858c41f19081eb16deff2a195b963389b4e6addd1e0dcedf4f0637e19d2239abb0dbe11666af2b56f287f1f932808c95b69e0a0db1c2917269f42bfbb0516942ea2a5362c59129452a74816491cc5864b8c07ea22a40241747dc1c84b940f9b608340eb6ee18d62aba76a9b38ec31c612dc3ceb976ad39e9e85db89f45e283a725a6cc90bdf9f48a21d18be30f988fa4050ec756fd21f12c56a4cb72ae0f7b24ec13088f7f846392e42a0545718722d5c4275d994917a4eff3e244048ec49a513ac6c6c41fdc9135c6f88f0b53787f1920fbffcd400fa052f7a35ee58a05654315c27ac8c9c6ff7c332b1cf3797d0f2089ad23bb6f7fc4cad2da018bcf958b09a1c480de27386b597ddb7e36663072ba138ea938b68a353308380b8d06781e154555ee5acffa41b7840df66c4cbb1fddcffcecbf348f333f95f8c94d7e3c69b91047b4f63857ac71dfc92f899ff6d0f878278b09376e3a2167135633bbe165ef16019e5386ef8f8b753b5edb48ca7f2ea24638c4c32b6b128e0c509a086e5ee5ff5d14e771f20e7fbcf68cf83fa086679a65c3f700a81fe736310a3af48a827514e119592dcd2cae765c7d1a7a4edef8b3d5e7c22338f20cb8f09ecedfc43c59aeb392e5713ad6e964176c5e5cbc65199d9cdc11d3a0e695e38915478fd0c870bec513d95d055b618c704a754e9b7235dad48638423be91982e45fccdf9a3e813d49494e655938d20dfca85381c3d503a50a313204d6028c38743a710e5ac0cee96350e351e4854556ee999f6330483dcba484d0ec6a32dc4ab8e8dc0a3d30ba92244d779f7c2c72098db6f2bc65621fa4103598202a4d0b88ea51c25d64dd0556a48be0bc6509dd0056997f8102b2f03a52928a6f588bf796baf1f5d3c58f341f4fae76e90a1fe027710034c3bc3d11c3c23fddf9f7e57038c9a0f4b12ab624d608bd732330b6a176e53dcb8edd936bc8a5c257036a0e012b6d7b8aedcb34b285a3ceab63c7d16af7fa0a189369129bdce40f9af0233ca2506aa6c69e0d8d036a3e27e347aa2d55f9215a452b0e55b42bc3a158f8060f4fe85913b37efdbf7ebaa2dd4e55dcc0ec701e831977f3e124b5ad07a4a16743429ce84a23bd3ecc1b5a1e7c8e5d0c059bbc188cdd8819150bf8589762e331729025dc6220f6ceab0585d99f8e1a38815441bc686b544740904afa057e7891e27b1d876109aae317fb49bf1a17888dbb4926136cb836270a15c9b1f7dd155684d19ebd80fc30289d6033abd888d541fbe94b546e3c250d9809aec0a77cc101938a4159fdafeb1f7094aa1c42b83646ef32acda3c0b88fff1225c16ecc8e9994c563c69a60a719bd5ad5530bd53eac649061ffa0cc9e9ec32e01af4eeff855bc876ce971e3ec211efd9ae105b1b92e95fc21bfac11e958a043175be4343db838a4934eff1b3c8d4386de30c95a553a1e94727c4fd14dbded197fa10f87521824d68fdcfd941ee0593530feebfc79856d3aa1931edf4062ddc62e238ccb42dda7650f294e5f01826181f4dcba832f7e1cbc6f5f919f45e8941c93aa1933556eab9dae42028a792c9c2815d8fd9a9f36ed9fd68d2518a06aff3f1c8762673284d81d87dcbc3370774522c2bfc5a2999f614231c4fe05490d151330cf4a0bde9ae77d9655be1ed834d402e08341d279c2038dd33ef7be3952f586cdb97fca80b0d37f791766b7c537fb960b2fedb51d97ae581fb49f5d026977be60077a7e9064f96fbed406518db93a28a84d390f72e4dddf09ee872cc748a12699aa63a25bbe6276b13fbcbb81e5f4d2336a5e6377bd1580025f783737de57bd8ba537ce26a88a7e51e72f89aecbfd3946ec88c77e29bed0daaa187780d22255c389c1eed82edebd160c712d50bc01f61eb8079703a6bcd97c4348a2bcbfd5746cc783d3e42e5391654b675d46f624eed3d65efa615072e85f571d1518bf7cac08229ac8c63a790583924d9e91f2dea3e838f0e1ce1ebc80838c337af69b73e4e078347f57dcb52cd8e8570c3e0217b7116f072dca3b8db67e85aa0319a092ccf94465fbc',
	publicKey: {
		alg: 'RS512',
		e: 'AQAB',
		ext: true,
		key_ops: ['verify'],
		kty: 'RSA',
		n: 'kFdEbpFvSP7Y9I1qiVVZfpktN5ijl4eLzEKO4gfywwbjwDzfjH9n4aRW1Ez4ebHBsPXqLELTDFge-3xJ8ndQ_jrl2sEr4DKLeXLxmzNchzuHFsxnCqccuq_M_I-nmOau6J2yfU3VClosJF9ijpMxWjcRINKuVSe4AKn508HYyoD1b0nBCLP-01Qi_BrVzcNaebjSZYD0-BaUZYUW328KpqLgDUC8as-DskkkbXU2nbojbyjq1Jns9o1ar_JPzgmSz7QzT5zrJNN1j2zpgMW3hs71WXPNaOONJjJ6HXbW0YicL-s7hTD-FT4plNqZZ7evxrfnhDfLjLOMMm6O7zJc5z0lwFpzdKrRZxUkDR3epCHmYwFFsmpyZRJ5Jzlr2S_9KXcXwEjzSAnwCua9s3sCRVeq7xcgePs2E90nKHd0L0RTxxFhTBOdzYMf1jMAtWED7ZmUWHm8TFVpUY64BCNwE8MK6NGELcXbtG-o_wECtI_10M2PuJ5tWUAb8A9x0GKNLK2b2ctUeFV9h3rviblNJDorNvjrpNNyWQSMDi7pRrodj10jNiNpCPiCkPaHzLFI1r9G23GcZrHuHjgjQ2Tmq4OMwlUePuBLCvpQDo9lz4b_V-ff-eMR6Rm6hKuUdW6aAPYNcQ4Bngqf_ABWrPxT3RPp-huXe9mNEvzQhSaN488'
	}
};

const salt = new Uint32Array([
	1370921999, 362000921, 1401009754, 4262136113, 2710957243, 1794858990, 2125776193, 2181252641,
	3689540781, 1877738531, 3132070000, 1919055809, 1447966125, 2608881379, 3006453550, 792443570
]);

test('generate keys', async () => {
	const signingKeys = await generateSigningKeypair();
	const encryptionKeys = await generateEncryptionKeypair();
	expect(signingKeys).toBeTruthy();
	expect(encryptionKeys).toBeTruthy();
});

test('import export encryption keypair with password', async () => {
	const password = 'test password';
	const imported = await importEncryptionKeyPair(encryptionKey, password, salt);
	const exported = await exportUserKeypair(imported, password, salt);
	expect(exported).toStrictEqual(encryptionKey);
});

test('import export signing keypair with password', async () => {
	const password = 'test password';
	const imported = await importSigningKeyPair(signingKey, password, salt);
	const exported = await exportUserKeypair(imported, password, salt);
	expect(exported).toStrictEqual(signingKey);
});

test('register', async () => {
	const password = 'test password';
	const keyPair = await generateEncryptionKeypair();
	const exported = await exportUserKeypair(keyPair, password, salt);
	expect(exported).toBeTruthy();
});

test(`login`, async () => {
	const password = 'test password';
	const keyPair = await login(encryptionKey, signingKey, password, salt);
	expect(keyPair).toBeTruthy();

	await expect(login(encryptionKey, signingKey, 'wrong password', salt)).rejects.toThrow();
});

test('page key', async () => {
	const key = await createSymmKey();

	const payload = aesjs.utils.utf8.toBytes('Test');
	const encrypted = encryptWithKey(key, payload);
	const output = decryptWithKey(key, encrypted);

	const result = aesjs.utils.utf8.fromBytes(output);

	expect(result).toBe('Test');
});

test('page key import export', async () => {
	const password = 'test password';
	const keys = await login(encryptionKey, signingKey, password, salt);

	const key = await createSymmKey();

	const exported = await exportSymmKey(keys.encryptionKey, key);

	// store exported key in db

	const imported = new Uint8Array(await importSymmKey(keys.encryptionKey, exported));

	// key loaded from db

	expect(imported).toStrictEqual(key);
});

test('create signature', async () => {
	const password = 'test password';
	const keys = await login(encryptionKey, signingKey, password, salt);

	const data = {
		name: 'John Doe',
		publicKey: encryptionKey.publicKey,
		privateKeyHashed: encryptionKey.privateKeyHash
	};

	const payload = encode(data);

	expect(aesjs.utils.hex.fromBytes(payload)).toMatchSnapshot();

	const signature = await createPayloadSignature(keys.signingKey, payload);
	expect(signature).toMatchSnapshot();

	const valid = await verifySignature(keys.signingKey, payload, signature);

	expect(valid).toBe(true);
	const result = decode(payload);
	expect(result).toStrictEqual(data);
});
