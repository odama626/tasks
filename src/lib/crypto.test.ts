import { test, expect } from 'vitest';
import * as aesjs from 'aes-js';
import { base64ToBytes, base64decode, base64encode, bytesToBase64 } from 'byte-base64';
import {
	createPayloadSignature,
	createSymmKey,
	decryptWithKey,
	encryptWithKey,
	exportSymmKey,
	exportUserKeypair,
	generateEncryptionKeypair,
	importSymmKey,
	importEncryptionKeyPair,
	login,
	generateSigningKeypair,
	importSigningKeyPair,
	verifySignature
} from './crypto';
import { encode, decode } from '@msgpack/msgpack';

const encryptionKey = {
	privateKeyHash: base64ToBytes(
		'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'
	),
	publicKey: {
		alg: 'RSA-OAEP-512',
		e: 'AQAB',
		ext: true,
		key_ops: ['encrypt'],
		kty: 'RSA',
		n: 'lplhoyt6qCEvYIfCwnRx2UbWrCx3npA8ZCHXyrGzs61gRhbITlGwCWlWK8teHGiE7jIt_bj2diFtwErNstg5zUHWuOSEkI5b0R3Q6JdcT2igvl-qWnRcCv5ty_6nGkPJ-DzPpD4ixLtAjk6aVGg8sTKR3xJmZSVLRTazvliAbKIYi9iISESX4XlDX7xBIqLf1xpFeQYDkpb18Y0OREmR0PyAEaSAu5puI3Q_d-WD5-cczvchQJqAauk2f2GWSqKV2As8QLsbAuGJ_d3IgnvjMaQyGFeua_LfgogsPx9NAyo3RHWvODyUOYOD1BEi7UExyimcgCDLDTfvHp-nVSSpwdJOKp3Mq2UsK3vOrgdBspz2p5Jlfa31qZZWkLPRJ6flrlP_bPGgPBT1fv9hrXhH2K9H5ricZkegs0ZUWDVC97aT6AvqiU7M8hCrl-Goa_Aw4EcatQCjc4_KBinNHISVul3jXiKuKW4g1beo0QfAgDVkyy4vAvhKAnzShsCQbS4OMer_xBzGRAy0Jzr73k7LBobm0em7jhlfzGzU9xly8_s8RweZ8a4g9Wlkxv8zyqPTdjBjKIxnsgKWi9flyL29Bb7hF9OWebKN7nRxUW077cuZ9aObmBME6fdnNClNaHOSgHpbudej4yLEmrdkQB-hqkhmXnQF1x21348IV30z2rM'
	}
};
const signingKey = {
	privateKeyHash: base64ToBytes(
		'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'
	),
	publicKey: {
		alg: 'RS512',
		e: 'AQAB',
		ext: true,
		key_ops: ['verify'],
		kty: 'RSA',
		n: 'jcgAXfPQzm3A5vIWzGfEB1BKilHN7Udn6c7n6-R_nKDVOSLLXwi7iPuSSabfr-enr8nAa-sjOYu3ddgZiCW5AXNveh57vLUDeEZhsPvDHvdqWFTcDgc8aN3k0NsXTKp5jD3wZiXEr0sSX0rcgVLiHUaCRKvO9AR3Dg1s6cpH1CN00AdQnTjydXwRnJHV_if-P1OZK_-2sfDDR6nlvqNLqK39lFvA_btjeL7yP-jrJdqWFu-cxe1i41WMiHZlJu6D0wSWga3XLd4BGhE8tOO_jAk7xN6gjaztrpuZC-S3-unlBtvGgBD9nvdcXrdwsR2ttbjDpNg2A3Z2rMx6y6zl_jlxmZ4bc_RejZ7IZJlkTFPOp1aenIwYW8zVFdNKtplpGynTKdBkK80JYM8Dht633DTL5WpfNxBUR2Y6ECWe_j1E7sJjdWeadMSxgzA1ClV5laQaEYsU7N5tRG3IydN2gB050a0vCh2MmCIVVjEWVBtVAuSbM0-Oix8cxEvWYLpwKwon1Zunmti3YgzZ_Cpdmfcd1sf1Hb16iwohyMl9BIJfTC0t3A-6FwKw4GX1yVqRbnkt4dKYZfA6yMDbT5J-WdSaYDBtG42poJko-RVNNT6-vsP9XurHQjxk1EOUvg6sEfIIAgs4s_EAecdzJ9fN8AYcsMUQ8ysdDnE6MgeUghc'
	}
};

const salt = new Uint32Array([
	1370921999, 362000921, 1401009754, 4262136113, 2710957243, 1794858990, 2125776193, 2181252641,
	3689540781, 1877738531, 3132070000, 1919055809, 1447966125, 2608881379, 3006453550, 792443570
]);

test('generate keys', async () => {
	const password = 'test password';
	const signingKeys = await generateSigningKeypair();
	const encryptionKeys = await generateEncryptionKeypair();

	expect(signingKeys).toBeTruthy();
	expect(encryptionKeys).toBeTruthy();
});

test('import export encryption keypair with password', async () => {
	const password = 'test password';
	const imported = await importEncryptionKeyPair(encryptionKey, password, salt);
	const exported = await exportUserKeypair(imported, password, salt);
	expect(exported).toStrictEqual(encryptionKey);
});

test('import export signing keypair with password', async () => {
	const password = 'test password';
	const imported = await importSigningKeyPair(signingKey, password, salt);
	const exported = await exportUserKeypair(imported, password, salt);
	expect(exported).toStrictEqual(signingKey);
});

test('register', async () => {
	const password = 'test password';
	const keyPair = await generateEncryptionKeypair();
	const exported = await exportUserKeypair(keyPair, password, salt);
	expect(exported).toBeTruthy();
});

test(`login`, async () => {
	const password = 'test password';
	const keyPair = await login(encryptionKey, signingKey, password, salt);
	expect(keyPair).toBeTruthy();

	await expect(login(encryptionKey, signingKey, 'wrong password', salt)).rejects.toThrow();
});

test('page key', async () => {
	const key = await createSymmKey();

	const payload = aesjs.utils.utf8.toBytes('Test');
	const encrypted = encryptWithKey(key, payload);
	const output = decryptWithKey(key, encrypted);

	const result = aesjs.utils.utf8.fromBytes(output);

	expect(result).toBe('Test');
});

test('page key import export', async () => {
	const password = 'test password';
	const keys = await login(encryptionKey, signingKey, password, salt);

	const key = await createSymmKey();

	const exported = await exportSymmKey(keys.encryptionKeys, key);

	// store exported key in db

	const imported = new Uint8Array(await importSymmKey(keys.encryptionKeys, exported));

	// key loaded from db

	expect(imported).toStrictEqual(key);
});

test('create signature', async () => {
	const password = 'test password';
	const keys = await login(encryptionKey, signingKey, password, salt);

	const data = {
		name: 'John Doe',
		publicKey: encryptionKey.publicKey,
		privateKeyHashed: encryptionKey.privateKeyHash
	};

	const payload = encode(data);

	expect(bytesToBase64(payload)).toMatchInlineSnapshot(
		`"g6RuYW1lqEpvaG4gRG9lqXB1YmxpY0tleYajYWxnrFJTQS1PQUVQLTUxMqFlpEFRQUKjZXh0w6drZXlfb3BzkadlbmNyeXB0o2t0eaNSU0GhbtoCq2xwbGhveXQ2cUNFdllJZkN3blJ4MlViV3JDeDNucEE4WkNIWHlyR3pzNjFnUmhiSVRsR3dDV2xXSzh0ZUhHaUU3akl0X2JqMmRpRnR3RXJOc3RnNXpVSFd1T1NFa0k1YjBSM1E2SmRjVDJpZ3ZsLXFXblJjQ3Y1dHlfNm5Ha1BKLUR6UHBENGl4THRBams2YVZHZzhzVEtSM3hKbVpTVkxSVGF6dmxpQWJLSVlpOWlJU0VTWDRYbERYN3hCSXFMZjF4cEZlUVlEa3BiMThZME9SRW1SMFB5QUVhU0F1NXB1STNRX2QtV0Q1LWNjenZjaFFKcUFhdWsyZjJHV1NxS1YyQXM4UUxzYkF1R0pfZDNJZ252ak1hUXlHRmV1YV9MZmdvZ3NQeDlOQXlvM1JIV3ZPRHlVT1lPRDFCRWk3VUV4eWltY2dDRExEVGZ2SHAtblZTU3B3ZEpPS3AzTXEyVXNLM3ZPcmdkQnNwejJwNUpsZmEzMXFaWldrTFBSSjZmbHJsUF9iUEdnUEJUMWZ2OWhyWGhIMks5SDVyaWNaa2VnczBaVVdEVkM5N2FUNkF2cWlVN004aENybC1Hb2FfQXc0RWNhdFFDamM0X0tCaW5OSElTVnVsM2pYaUt1S1c0ZzFiZW8wUWZBZ0RWa3l5NHZBdmhLQW56U2hzQ1FiUzRPTWVyX3hCekdSQXkwSnpyNzNrN0xCb2JtMGVtN2pobGZ6R3pVOXhseThfczhSd2VaOGE0ZzlXbGt4djh6eXFQVGRqQmpLSXhuc2dLV2k5Zmx5TDI5QmI3aEY5T1dlYktON25SeFVXMDc3Y3VaOWFPYm1CTUU2ZmRuTkNsTmFIT1NnSHBidWRlajR5TEVtcmRrUUItaHFraG1YblFGMXgyMTM0OElWMzB6MnJNsHByaXZhdGVLZXlIYXNoZWTFCUdQu/I4zS4PNGjZ/AASGhbEb4ljwyRoepBxJtG7rmPFVL0YVURrGhMIV/hahbv7pQALUEKXvPnkK8wFHsnUYVh3Zcg7jeQ1XYX21Ixhlo+auMtzO/1tMhR7X6bLSlXltptDniS4897up77KygHK+t99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"`
	);

	const signature = await createPayloadSignature(keys.signingKeys, payload);
	expect(signature).toMatchInlineSnapshot(
		`"iSFhBwDuy7DfkJFO9tzF2J5yTWL7ze7rAWCLuAgGaAhSiyrJF3emw7N5dJTr01JvCqPYmQZWCzvKs59aZb55Do/3xgyGZjjoSkWyaIbONWXQB7spMtssmUv5HUIcd/iUn4zREbE8LLJ00353xrW7330ioeE2vXtOtWPcBjKkeio0LQN3A8BdulYkTPtqZgPZRuiWB+KOUVndkzcV8IueJpj+tr+GDCRpWCo0FcFDbcyxzEn5OGOwHbp8s/3MYQje/w5Kj5x7vmU9+ENPoiv1fA2Mrp9vV7Y7LlBrKV8fKHuKCtctPn3HVxXNT1aDqlyZNGBJUIoNVfdP4R1zipab7g4XY+nayHB8tw5b3uBv37Me94PnYy+8aov/bWgWGz9Bhkm1aqRUpOocgnRcbOONHhCcEz7ikaK7WsCW9+NJQXy38I0ML+ZHDAS16PqBCDODSq+VdFQQqqEWV54JnGAyUSfZmdFRcs0Uq3RUH2HIKyxyYuwdHgK1gyi54oKlU5COZ7W7cWFteZg2eKZeQgnF8J5jyyyFFeTHN7Gp/czzCx8UmNHdObKxrweO+ApHdGpIxuxnCUjQ3OsWBpdDDyObgmsuv6oPGRRp6EqZ/pax0r3RT4r+b+ww3NZ0ao+vxj0OkarHmDp3RC4KPQcPNGTIhpR6JrwK/D3fSAsxPpqoNlo="`
	);

	const valid = await verifySignature(keys.signingKeys, payload, signature);

	expect(valid).toBe(true);
	const result = decode(payload);
	expect(result).toStrictEqual(data);
});
